# Docker Compose Base Configuration
# Usage: docker compose up -d

version: '3.8'

services:
  # WordPress with MySQL
  wordpress:
    image: wordpress:latest
    container_name: titan_wordpress
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress_password
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_TABLE_PREFIX: wp_
    volumes:
      - wordpress_data:/var/www/html
      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    networks:
      - titan_network
    depends_on:
      - mysql

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: titan_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./my.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - titan_network
    command: --default-authentication-plugin=mysql_native_password

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: titan_phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: root_password
      UPLOAD_LIMIT: 256M
    networks:
      - titan_network
    depends_on:
      - mysql

  # Nginx Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: titan_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./sites:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - titan_network
    depends_on:
      - wordpress

  # Redis Cache (optional)
  redis:
    image: redis:alpine
    container_name: titan_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - titan_network
    command: redis-server --appendonly yes

  # PostgreSQL (alternative database)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: titan_postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: appdb
  #     POSTGRES_USER: appuser
  #     POSTGRES_PASSWORD: apppassword
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - titan_network

  # MongoDB (NoSQL database)
  # mongodb:
  #   image: mongo:latest
  #   container_name: titan_mongodb
  #   restart: unless-stopped
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: admin_password
  #   volumes:
  #     - mongodb_data:/data/db
  #   networks:
  #     - titan_network

  # Node.js App (example)
  # node_app:
  #   image: node:18-alpine
  #   container_name: titan_node_app
  #   restart: unless-stopped
  #   working_dir: /app
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./app:/app
  #   command: npm start
  #   networks:
  #     - titan_network

volumes:
  wordpress_data:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  # postgres_data:
  #   driver: local
  # mongodb_data:
  #   driver: local

networks:
  titan_network:
    driver: bridge